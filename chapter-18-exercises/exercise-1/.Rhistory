2+0+1
2+0+1
2+0+1*291.2
(2+0+1(*291.2
(2+0+1)*291.2
2+1+0
3+43+4
3+43+4
3+43+4
print("Hello world!")
My first program
//My first program
print("Hello world!")
print("Hello world!")
my_num <- 201
print("Hello world!")
print (my_num)
my_num <- 201
mynum_ <- my_num + 3
print (my_num)
my_num <- my_num + 3
print (my_num)
print("Hello world!")
my_num <- 201
my_num <- my_num + 3
print (my_num)
my_num <- 201
my_num <- my_num + 3
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Dubai"
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Dubai"
# Assign your name to the variable `my_name`
my_name <- "Vishank Rughwani"
# Assign your height (in inches) to a variable `my_height`
my_height <- 72
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 500
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price*puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- FALSE
if(total_cost>1000){
too_expensive <- TRUE
}
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000/puppy_price
paste("Hello", "World", "You rock")
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Dubai"
# Assign your name to the variable `my_name`
my_name <- "Vishank Rughwani"
# Assign your height (in inches) to a variable `my_height`
my_height <- 72
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 500
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price*puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost>1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000/puppy_price
# Create a variable `my_name` that contains your name
my_name <- "Vishank"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length = nchar(my_name)
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- my_name +" is programming!"
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, " is programming!")
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 50
fav_2 <- 60
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1/sqrt(201)
fav_2 <- fav_2/sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1,fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
roubd_sum <- round(raw_sum)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
roubd_sum <- round(raw_sum,1)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum,1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1,1)
round_2 <- round(fav_2,1)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1,round_2)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
print(max(round_sum, sum_round))
install.packages("dplyr")
install.packages("httr")
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library("httr")
library("jsonlite")
library("dplyr")
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/orgs/programming-for-data-science/repos"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
print(response)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
response_text <- content(response, "text")
print(response_text)
# Convert the content variable from a JSON string into a data frame.
org_repos <- fromJSON(response_text)
# How many (public) repositories does the organization have?
print(nrow(org_repos))
print(org_repos)
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositories"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "graphics")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
response <- GET(paste0(base_uri, search_endpoint), query = query_params)
print(response)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
response_text <- content(response, "text")
graphics_repos = fromJSON(response_text)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
print(graphics_repos$total_count)
# What are the full names of the top 5 repos in the search results?
graphics_repo_names <- graphics_repos$items$full_name[1:5]
print(graphics_repo_names)
nyt_key <- "TieWrcIAGGvYhYaPtXDuBEf5xkppzHTj"
setwd("~/Desktop/UW/Winter_2020/INFO 201/book-exercises/chapter-18-exercises/exercise-1")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
query_params <- list("api-key" = nyt_key)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Lion King"
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- https://api.nytimes.com/svc/movies/v2/
endpoint <- "reviews/search.json"
uri <- paste0(base_uri, endpoint)
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri, endpoint)
query_params <- list("api-key" = nyt_key, "movie-name" = moive_name)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
query_params <- list("api-key" = nyt_key, "movie-name" = moive_name)
query_params <- list("api-key" = nyt_key, "movie-name" = movie_name)
response <- GET(uri, query = query_params_list)
body <- content(response, "text")
# load relevant libraries
library("httr")
library("jsonlite")
response <- GET(uri, query = query_params_list)
query_params <- list("api-key" = nyt_key)
query_params_list <- list("api-key" = nyt_key, "movie-name" = movie_name)
response <- GET(uri, query = query_params_list)
body <- content(response, "text")
data <- fromJSON(body)
# What kind of data structure did this produce? A data frame? A list?
is.data.frame(data)
# What kind of data structure did this produce? A data frame? A list?
is.list(data)
data
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
names(data$results)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(data$results)
headline <- first_review$headline
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
first_review <- reviews[1, ]
headline <- first_review$headline
summary <- first_review$summary_short
link <- first_review$link.url
# Create a list of the three pieces of information from above.
# Print out the list.
review <- list(headline = headline, summary = summary, link = link)
review
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library("ggplot2")
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
?diamonds
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds) + geom_col(mapping = aes(x = cut, y = price, fill = clarity))
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds) + geom_col(mapping = aes(x = cut, y = price, fill = clarity), fill = position)
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds) + geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = fill)
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds) + geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "fill")
# Draw the same chart again, but with each element positioned to "dodge" each other
ggplot(data = diamonds) + geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "dodge")
# Draw a plot with point geometry with the x-position mapped to `cut` and the
# y-position mapped to `clarity`
# This creates a "grid" grouping the points
ggplot(data = diamonds) + geom_col(mapping = aes(x = cut, y =clarity)
# Draw a plot with point geometry with the x-position mapped to `cut` and the
# y-position mapped to `clarity`
# This creates a "grid" grouping the points
ggplot(data = diamonds) + geom_col(mapping = aes(x = cut, y =clarity))
# Draw a plot with point geometry with the x-position mapped to `cut` and the
# y-position mapped to `clarity`
# This creates a "grid" grouping the points
ggplot(data = diamonds) + geom_col(mapping = aes(x = cut, y = clarity))
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
ggplot(data = diamonds) + geom_col(mapping = aes(x = cut, y = clarity), position = "jitter")
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(data = diamonds) + geom_boxplot(mapping = aes(x = color, y = price))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds) + geom_boxplot(mapping = aes(x = color, y = price)) + scale_y_log10()
# For another version, draw the same plot but with `violin` geometry instead of
# `boxplot` geometry!
# How does the logarithmic scale change the data presentation?
ggplot(data = diamonds) + geom_violin(mapping = aes(x = color, y = price)) + scale_y_log10()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds) + geom_bin2d(mapping = aes(x = color, y = price)) + scale_y_log10() + scale_x_log10()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds) + geom_bin2d(mapping = aes(x = color, y = price)) + scale_y_log10() + scale_x_log10()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds) + geom_bin2d(mapping = aes(x = color, y = price)) + scale_x_log10() + scale_y_log10()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds) + geom_bin2d(mapping = aes(x = color, y = price)) + scale_x_log10()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds) +
geom_bin2d(mapping = aes(x = carat, y = price)) +
scale_x_log10() +
scale_y_log10()
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data = diamonds) + geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds) + geom_point(mapping = aes(x = carat, y = price, color = clarity), color = "pink")
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
bar <- ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = cut), width = 1)
bar
# Draw the same chart, but with the coordinate system flipped
bar + coord_flip()
# Draw the same chart, but in a polar coordinate system. It's a Coxcomb chart!
bar + coord_polar()
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds) + geom_point(mapping = aes(x = carat, y = price, color = clarity), color = "pink") + facet_wrap(~ color)
# Use the `ggsave()` function to save the current (recent) plot to disk.
# Name the output file "my-plot.png".
# Make sure you've set the working directory!!
ggsave("my-plot.png")
